// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace rep
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Reply : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Reply GetRootAsReply(ByteBuffer _bb) { return GetRootAsReply(_bb, new Reply()); }
  public static Reply GetRootAsReply(ByteBuffer _bb, Reply obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Reply __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float Pose(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int PoseLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetPoseBytes() { return __p.__vector_as_span<float>(4, 4); }
#else
  public ArraySegment<byte>? GetPoseBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public float[] GetPoseArray() { return __p.__vector_as_array<float>(4); }

  public static Offset<rep.Reply> CreateReply(FlatBufferBuilder builder,
      VectorOffset poseOffset = default(VectorOffset)) {
    builder.StartTable(1);
    Reply.AddPose(builder, poseOffset);
    return Reply.EndReply(builder);
  }

  public static void StartReply(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddPose(FlatBufferBuilder builder, VectorOffset poseOffset) { builder.AddOffset(0, poseOffset.Value, 0); }
  public static VectorOffset CreatePoseVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePoseVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePoseVectorBlock(FlatBufferBuilder builder, ArraySegment<float> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePoseVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<float>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPoseVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<rep.Reply> EndReply(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<rep.Reply>(o);
  }
  public static void FinishReplyBuffer(FlatBufferBuilder builder, Offset<rep.Reply> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedReplyBuffer(FlatBufferBuilder builder, Offset<rep.Reply> offset) { builder.FinishSizePrefixed(offset.Value); }
}


}
